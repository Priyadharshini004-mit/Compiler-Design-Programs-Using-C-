#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

typedef struct {
char symbols[256];
} production_body;

typedef struct {
char head;
production_body productions[32];
int noOfProductions;
} production;

typedef struct {
production productions[26];
} grammar;

void setFirsts(grammar g, int firsts[26][256]);
void setFollow(grammar g, int firsts[26][256], int follow[26][256]);
grammar getGrammar();
void display(grammar g);
void displayParsingTable(grammar g, int firsts[26][256], int follows[26][256]);

grammar getGrammar() {
grammar g = {0};
while (1) {
printf("Enter head (or 'x' to finish): ");
char h;
fflush(stdin);
scanf("\n%c", &h);
 if (h == 'x') {
break;
 }
printf("Enter number of productions for %c: ", h);
int numProductions;
scanf("%d", &numProductions);
for (int i = 0; i < numProductions; i++) {
printf("Enter production %d (e.g., ab): ", i + 1);
fflush(stdin);
scanf("\n%[^\n]s", g.productions[h - 'A'].productions[g.productions[h - 'A'].noOfProductions].symbols);
g.productions[h - 'A'].noOfProductions++;
}
g.productions[h - 'A'].head = h;
 }
return g;
}

void display(grammar g) {
printf("\n\nGrammar:\n");
for (int i = 0; i < 26; i++) {
if (g.productions[i].noOfProductions == 0)
continue;
printf("%c -> ", g.productions[i].head);
for (int j = 0; j < g.productions[i].noOfProductions; j++) {
printf("%s", g.productions[i].productions[j].symbols);
if (j < g.productions[i].noOfProductions - 1) {
printf(" | ");
}
}
printf("\n");
}
}

void setFirsts(grammar g, int firsts[26][256]) {
int isChanged, i, j, k, l;
for (i = 0; i < 26; i++) {
for (j = 0; j < 256; j++) {
firsts[i][j] = 0;
}
}
do {
isChanged = 0;
for (i = 0; i < 26; i++) {
if (g.productions[i].noOfProductions == 0)
continue;
for (j = 0; j < g.productions[i].noOfProductions; j++) {
for (k = 0; g.productions[i].productions[j].symbols[k]; k++) {
if (!isupper(g.productions[i].productions[j].symbols[k])) {
if (!firsts[i][g.productions[i].productions[j].symbols[k]]) {
isChanged = 1;
firsts[i][g.productions[i].productions[j].symbols[k]] = 1;
}
break;
}
for (l = 0; l < 256; l++) {
if (firsts[g.productions[i].productions[j].symbols[k] - 'A'][l] && !firsts[i][l]) {
isChanged = 1;
firsts[i][l] = 1;
}
}
break;
}
}
}
} while (isChanged);
}

void setFollow(grammar g, int firsts[26][256], int follow[26][256]) {
int isChanged, i, j, k, l;
for (i = 0; i < 26; i++) {
for (j = 0; j < 256; j++) {
follow[i][j] = 0;
}
}
follow['S' - 'A']['$'] = 1;   
do {
isChanged = 0;
for (i = 0; i < 26; i++) {
if (g.productions[i].noOfProductions == 0)
continue;
for (j = 0; j < g.productions[i].noOfProductions; j++) {
char *symbols = g.productions[i].productions[j].symbols;
for (k = 0; symbols[k]; k++) {
if (isupper(symbols[k])) {
if (symbols[k + 1] != '\0') {
if (isupper(symbols[k + 1])) {
int nextIndex = symbols[k + 1] - 'A';
for (l = 0; l < 256; l++) {
if (firsts[nextIndex][l] && l != 238 && !follow[symbols[k] - 'A'][l]) {
follow[symbols[k] - 'A'][l] = 1;
isChanged = 1;
}
}
if (firsts[nextIndex][238]) {
for (l = 0; l < 256; l++) {
if (follow[i][l] && !follow[symbols[k] - 'A'][l]) {
follow[symbols[k] - 'A'][l] = 1;
isChanged = 1;
}
}
}
} else {
if (!follow[symbols[k] - 'A'][symbols[k + 1]]) {
follow[symbols[k] - 'A'][symbols[k + 1]] = 1;
isChanged = 1;
}
}
} else {
for (l = 0; l < 256; l++) {
if (follow[i][l] && !follow[symbols[k] - 'A'][l]) {
follow[symbols[k] - 'A'][l] = 1;
isChanged = 1;
}
}
}
}
}
}
}
} while (isChanged);
}

void displayParsingTable(grammar g, int firsts[26][256], int follows[26][256]) {
int terminals[256] = {0};
for (int i = 0; i < 26; i++) {
if (g.productions[i].noOfProductions == 0)
continue;
for (int j = 0; j < g.productions[i].noOfProductions; j++) {
for (int k = 0; g.productions[i].productions[j].symbols[k]; k++) {
if (!isupper(g.productions[i].productions[j].symbols[k])) {
terminals[(unsigned char)g.productions[i].productions[j].symbols[k]] = 1;
}
}
}
}

printf("\n\nPredictive Parsing Table:\n");
   
printf("%-8s", "NT");   
for (int i = 0; i < 256; i++) {
if (terminals[i]) {
printf("%-12c", i);
}
}
printf("\n");
for (int i = 0; i < 26; i++) {
if (g.productions[i].noOfProductions == 0)
continue;
printf("%-8c", 'A' + i);   
for (int j = 0; j < 256; j++) {
if (terminals[j]) {
int isDisplayed = 0;
for (int k = 0; k < g.productions[i].noOfProductions; k++) {
if (firsts[i][j]) {
printf("%c->%-8s", 'A' + i, g.productions[i].productions[k].symbols);
isDisplayed = 1;
break;
}
}
if (!isDisplayed) {
printf("%-12s", "-");
}
}
}
printf("\n");
}
}


int main() {
grammar g = getGrammar();
display(g);
int firsts[26][256] = {0}, follows[26][256] = {0};
setFirsts(g, firsts);
setFollow(g, firsts, follows);
printf("\nFIRST()\n");
for (int i = 0; i < 26; i++) {
if (g.productions[i].noOfProductions == 0)
continue;
printf("%c\t{", 'A' + i);
for (int j = 0; j < 256; j++)
if (firsts[i][j])
printf("%c, ", j);
printf("}\n");
}
printf("\n\nFOLLOW()\n");
for (int i = 0; i < 26; i++) {
if (g.productions[i].noOfProductions == 0)
continue;
printf("%c\t{", 'A' + i);
for (int j = 0; j < 256; j++)
if (follows[i][j])
printf("%c, ", j);
printf("}\n");
}
displayParsingTable(g, firsts, follows);
return 0;
}
